//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-30672275
// Cuda compilation tools, release 11.5, V11.5.119
// Based on NVVM 7.0.1
//

.version 7.5
.target sm_60
.address_size 64

	// .globl	_Z9intersecti
.global .align 16 .b8 sphere[16];
.global .align 4 .b8 geometric_normal[12];
.global .align 4 .b8 shading_normal[12];
.global .align 4 .b8 ray[36];
.global .align 4 .b8 _ZN21rti_internal_typeinfo6sphereE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo16geometric_normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14shading_normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 1 .b8 _ZN21rti_internal_typename6sphereE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 1 .b8 _ZN21rti_internal_typename16geometric_normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename14shading_normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum6sphereE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum16geometric_normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14shading_normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic6sphereE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic16geometric_normalE[27] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 103, 101, 111, 109, 101, 116, 114, 105, 99, 95, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic14shading_normalE[25] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 115, 104, 97, 100, 105, 110, 103, 95, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation6sphereE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation16geometric_normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14shading_normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];

.visible .entry _Z9intersecti(
	.param .u32 _Z9intersecti_param_0
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<57>;
	.reg .b32 	%r<7>;


	ld.global.v4.f32 	{%f14, %f15, %f16, %f17}, [sphere];
	ld.global.f32 	%f21, [ray];
	sub.ftz.f32 	%f2, %f21, %f14;
	ld.global.f32 	%f22, [ray+4];
	sub.ftz.f32 	%f3, %f22, %f15;
	ld.global.f32 	%f23, [ray+8];
	sub.ftz.f32 	%f4, %f23, %f16;
	ld.global.f32 	%f24, [ray+12];
	ld.global.f32 	%f25, [ray+16];
	mul.ftz.f32 	%f26, %f25, %f25;
	fma.rn.ftz.f32 	%f27, %f24, %f24, %f26;
	ld.global.f32 	%f28, [ray+20];
	fma.rn.ftz.f32 	%f29, %f28, %f28, %f27;
	rsqrt.approx.ftz.f32 	%f5, %f29;
	mul.ftz.f32 	%f6, %f24, %f5;
	mul.ftz.f32 	%f7, %f5, %f25;
	mul.ftz.f32 	%f8, %f5, %f28;
	mul.ftz.f32 	%f30, %f3, %f7;
	fma.rn.ftz.f32 	%f31, %f2, %f6, %f30;
	fma.rn.ftz.f32 	%f9, %f4, %f8, %f31;
	mul.ftz.f32 	%f32, %f3, %f3;
	fma.rn.ftz.f32 	%f33, %f2, %f2, %f32;
	fma.rn.ftz.f32 	%f34, %f4, %f4, %f33;
	mul.ftz.f32 	%f35, %f17, %f17;
	sub.ftz.f32 	%f36, %f34, %f35;
	mul.ftz.f32 	%f37, %f9, %f9;
	sub.ftz.f32 	%f10, %f37, %f36;
	setp.leu.ftz.f32 	%p1, %f10, 0f00000000;
	@%p1 bra 	$L__BB0_5;

	sqrt.approx.ftz.f32 	%f11, %f10;
	neg.ftz.f32 	%f39, %f9;
	sub.ftz.f32 	%f40, %f39, %f11;
	add.ftz.f32 	%f12, %f40, 0f00000000;
	mul.ftz.f32 	%f38, %f5, %f12;
	// begin inline asm
	call (%r1), _rt_potential_intersection, (%f38);
	// end inline asm
	setp.eq.s32 	%p2, %r1, 0;
	@%p2 bra 	$L__BB0_3;

	fma.rn.ftz.f32 	%f41, %f6, %f12, %f2;
	fma.rn.ftz.f32 	%f42, %f7, %f12, %f3;
	fma.rn.ftz.f32 	%f43, %f8, %f12, %f4;
	rcp.approx.ftz.f32 	%f44, %f17;
	mul.ftz.f32 	%f45, %f44, %f41;
	mul.ftz.f32 	%f46, %f44, %f42;
	mul.ftz.f32 	%f47, %f44, %f43;
	st.global.f32 	[geometric_normal], %f45;
	st.global.f32 	[geometric_normal+4], %f46;
	st.global.f32 	[geometric_normal+8], %f47;
	st.global.f32 	[shading_normal], %f45;
	st.global.f32 	[shading_normal+4], %f46;
	st.global.f32 	[shading_normal+8], %f47;
	mov.u32 	%r3, 0;
	// begin inline asm
	call (%r2), _rt_report_intersection, (%r3);
	// end inline asm
	setp.ne.s32 	%p3, %r2, 0;
	@%p3 bra 	$L__BB0_5;

$L__BB0_3:
	sub.ftz.f32 	%f49, %f11, %f9;
	add.ftz.f32 	%f13, %f49, 0f00000000;
	mul.ftz.f32 	%f48, %f5, %f13;
	// begin inline asm
	call (%r4), _rt_potential_intersection, (%f48);
	// end inline asm
	setp.eq.s32 	%p4, %r4, 0;
	@%p4 bra 	$L__BB0_5;

	fma.rn.ftz.f32 	%f50, %f6, %f13, %f2;
	fma.rn.ftz.f32 	%f51, %f7, %f13, %f3;
	fma.rn.ftz.f32 	%f52, %f8, %f13, %f4;
	rcp.approx.ftz.f32 	%f53, %f17;
	mul.ftz.f32 	%f54, %f53, %f50;
	mul.ftz.f32 	%f55, %f53, %f51;
	mul.ftz.f32 	%f56, %f53, %f52;
	st.global.f32 	[geometric_normal], %f54;
	st.global.f32 	[geometric_normal+4], %f55;
	st.global.f32 	[geometric_normal+8], %f56;
	st.global.f32 	[shading_normal], %f54;
	st.global.f32 	[shading_normal+4], %f55;
	st.global.f32 	[shading_normal+8], %f56;
	mov.u32 	%r6, 0;
	// begin inline asm
	call (%r5), _rt_report_intersection, (%r6);
	// end inline asm

$L__BB0_5:
	ret;

}
	// .globl	_Z16robust_intersecti
.visible .entry _Z16robust_intersecti(
	.param .u32 _Z16robust_intersecti_param_0
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<84>;
	.reg .b32 	%r<7>;


	ld.global.v4.f32 	{%f25, %f26, %f27, %f28}, [sphere];
	ld.global.f32 	%f32, [ray];
	sub.ftz.f32 	%f2, %f32, %f25;
	ld.global.f32 	%f33, [ray+4];
	sub.ftz.f32 	%f3, %f33, %f26;
	ld.global.f32 	%f34, [ray+8];
	sub.ftz.f32 	%f4, %f34, %f27;
	ld.global.f32 	%f35, [ray+12];
	ld.global.f32 	%f36, [ray+16];
	mul.ftz.f32 	%f37, %f36, %f36;
	fma.rn.ftz.f32 	%f38, %f35, %f35, %f37;
	ld.global.f32 	%f39, [ray+20];
	fma.rn.ftz.f32 	%f40, %f39, %f39, %f38;
	rsqrt.approx.ftz.f32 	%f5, %f40;
	mul.ftz.f32 	%f6, %f35, %f5;
	mul.ftz.f32 	%f7, %f5, %f36;
	mul.ftz.f32 	%f8, %f5, %f39;
	mul.ftz.f32 	%f41, %f3, %f7;
	fma.rn.ftz.f32 	%f42, %f2, %f6, %f41;
	fma.rn.ftz.f32 	%f82, %f4, %f8, %f42;
	mul.ftz.f32 	%f43, %f3, %f3;
	fma.rn.ftz.f32 	%f44, %f2, %f2, %f43;
	fma.rn.ftz.f32 	%f45, %f4, %f4, %f44;
	mul.ftz.f32 	%f10, %f28, %f28;
	sub.ftz.f32 	%f46, %f45, %f10;
	mul.ftz.f32 	%f47, %f82, %f82;
	sub.ftz.f32 	%f11, %f47, %f46;
	setp.leu.ftz.f32 	%p1, %f11, 0f00000000;
	mov.f32 	%f83, 0f00000000;
	@%p1 bra 	$L__BB1_8;

	sqrt.approx.ftz.f32 	%f81, %f11;
	neg.ftz.f32 	%f49, %f82;
	sub.ftz.f32 	%f13, %f49, %f81;
	abs.ftz.f32 	%f14, %f13;
	mul.ftz.f32 	%f15, %f28, 0f41200000;
	setp.leu.ftz.f32 	%p2, %f14, %f15;
	@%p2 bra 	$L__BB1_4;

	fma.rn.ftz.f32 	%f51, %f6, %f13, %f2;
	fma.rn.ftz.f32 	%f52, %f7, %f13, %f3;
	fma.rn.ftz.f32 	%f53, %f8, %f13, %f4;
	mul.ftz.f32 	%f54, %f7, %f52;
	fma.rn.ftz.f32 	%f55, %f6, %f51, %f54;
	fma.rn.ftz.f32 	%f82, %f8, %f53, %f55;
	mul.ftz.f32 	%f56, %f52, %f52;
	fma.rn.ftz.f32 	%f57, %f51, %f51, %f56;
	fma.rn.ftz.f32 	%f58, %f53, %f53, %f57;
	sub.ftz.f32 	%f59, %f58, %f10;
	mul.ftz.f32 	%f60, %f82, %f82;
	sub.ftz.f32 	%f17, %f60, %f59;
	setp.leu.ftz.f32 	%p3, %f17, 0f00000000;
	@%p3 bra 	$L__BB1_4;

	sqrt.approx.ftz.f32 	%f81, %f17;
	neg.ftz.f32 	%f61, %f82;
	sub.ftz.f32 	%f83, %f61, %f81;

$L__BB1_4:
	add.ftz.f32 	%f23, %f13, %f83;
	mul.ftz.f32 	%f62, %f5, %f23;
	// begin inline asm
	call (%r1), _rt_potential_intersection, (%f62);
	// end inline asm
	setp.eq.s32 	%p4, %r1, 0;
	@%p4 bra 	$L__BB1_6;

	fma.rn.ftz.f32 	%f63, %f6, %f23, %f2;
	fma.rn.ftz.f32 	%f64, %f7, %f23, %f3;
	fma.rn.ftz.f32 	%f65, %f8, %f23, %f4;
	rcp.approx.ftz.f32 	%f66, %f28;
	mul.ftz.f32 	%f67, %f66, %f63;
	mul.ftz.f32 	%f68, %f66, %f64;
	mul.ftz.f32 	%f69, %f66, %f65;
	st.global.f32 	[geometric_normal], %f67;
	st.global.f32 	[geometric_normal+4], %f68;
	st.global.f32 	[geometric_normal+8], %f69;
	st.global.f32 	[shading_normal], %f67;
	st.global.f32 	[shading_normal+4], %f68;
	st.global.f32 	[shading_normal+8], %f69;
	mov.u32 	%r3, 0;
	// begin inline asm
	call (%r2), _rt_report_intersection, (%r3);
	// end inline asm
	setp.ne.s32 	%p5, %r2, 0;
	@%p5 bra 	$L__BB1_8;

$L__BB1_6:
	setp.gt.ftz.f32 	%p6, %f14, %f15;
	selp.f32 	%f71, %f13, 0f00000000, %p6;
	sub.ftz.f32 	%f72, %f81, %f82;
	add.ftz.f32 	%f24, %f71, %f72;
	mul.ftz.f32 	%f70, %f5, %f24;
	// begin inline asm
	call (%r4), _rt_potential_intersection, (%f70);
	// end inline asm
	setp.eq.s32 	%p7, %r4, 0;
	@%p7 bra 	$L__BB1_8;

	fma.rn.ftz.f32 	%f73, %f6, %f24, %f2;
	fma.rn.ftz.f32 	%f74, %f7, %f24, %f3;
	fma.rn.ftz.f32 	%f75, %f8, %f24, %f4;
	rcp.approx.ftz.f32 	%f76, %f28;
	mul.ftz.f32 	%f77, %f76, %f73;
	mul.ftz.f32 	%f78, %f76, %f74;
	mul.ftz.f32 	%f79, %f76, %f75;
	st.global.f32 	[geometric_normal], %f77;
	st.global.f32 	[geometric_normal+4], %f78;
	st.global.f32 	[geometric_normal+8], %f79;
	st.global.f32 	[shading_normal], %f77;
	st.global.f32 	[shading_normal+4], %f78;
	st.global.f32 	[shading_normal+8], %f79;
	mov.u32 	%r6, 0;
	// begin inline asm
	call (%r5), _rt_report_intersection, (%r6);
	// end inline asm

$L__BB1_8:
	ret;

}
	// .globl	_Z6boundsiPf
.visible .entry _Z6boundsiPf(
	.param .u32 _Z6boundsiPf_param_0,
	.param .u64 _Z6boundsiPf_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<17>;
	.reg .b32 	%r<3>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd2, [_Z6boundsiPf_param_1];
	cvta.to.global.u64 	%rd1, %rd2;
	ld.global.v4.f32 	{%f6, %f7, %f8, %f9}, [sphere];
	setp.leu.ftz.f32 	%p1, %f9, 0f00000000;
	@%p1 bra 	$L__BB2_2;

	abs.ftz.f32 	%f10, %f9;
	setp.neu.ftz.f32 	%p2, %f10, 0f7F800000;
	@%p2 bra 	$L__BB2_3;
	bra.uni 	$L__BB2_2;

$L__BB2_3:
	sub.ftz.f32 	%f11, %f6, %f9;
	st.global.f32 	[%rd1], %f11;
	sub.ftz.f32 	%f12, %f7, %f9;
	st.global.f32 	[%rd1+4], %f12;
	sub.ftz.f32 	%f13, %f8, %f9;
	st.global.f32 	[%rd1+8], %f13;
	add.ftz.f32 	%f14, %f6, %f9;
	st.global.f32 	[%rd1+12], %f14;
	add.ftz.f32 	%f15, %f7, %f9;
	st.global.f32 	[%rd1+16], %f15;
	add.ftz.f32 	%f16, %f8, %f9;
	st.global.f32 	[%rd1+20], %f16;
	bra.uni 	$L__BB2_4;

$L__BB2_2:
	mov.u32 	%r1, 2096152002;
	st.global.u32 	[%rd1], %r1;
	st.global.u32 	[%rd1+4], %r1;
	st.global.u32 	[%rd1+8], %r1;
	mov.u32 	%r2, -51331646;
	st.global.u32 	[%rd1+12], %r2;
	st.global.u32 	[%rd1+16], %r2;
	st.global.u32 	[%rd1+20], %r2;

$L__BB2_4:
	ret;

}

